---
name: Build & Release
on:
  push:
    branches: ['**']
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
# Set default permissions for all jobs
permissions:
  contents: read
  security-events: write
  packages: read
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # for creating OIDC tokens
      contents: read
      packages: read
    env:
      COM_SONATYPE_CENTRAL_POLARION_OPENSOURCE_USERNAME: ${{ secrets.COM_SONATYPE_CENTRAL_POLARION_OPENSOURCE_USERNAME }}
      COM_SONATYPE_CENTRAL_POLARION_OPENSOURCE_TOKEN: ${{ secrets.COM_SONATYPE_CENTRAL_POLARION_OPENSOURCE_TOKEN }}
      COM_SONATYPE_CENTRAL_POLARION_OPENSOURCE_GPG_PASSPHRASE: ${{ secrets.COM_SONATYPE_CENTRAL_POLARION_OPENSOURCE_GPG_PASSPHRASE }}
      GITHUB_TOKEN: ${{ github.token }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      MARKDOWN2HTML_MAVEN_PLUGIN_FAIL_ON_ERROR: true
    steps:
      - name: 📄 Checkout the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: 🧱 Set up JDK and Maven
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00  # v4.7.1
        with:
          distribution: adopt
          java-version: 17
          cache: maven
          gpg-private-key: ${{ secrets.COM_SONATYPE_CENTRAL_POLARION_OPENSOURCE_GPG_PRIVATE_KEY }}
      - name: 🧱 Set up Jfrog
        uses: jfrog/setup-jfrog-cli@v4.5.6
        env:
          JF_URL: https://${{ vars.JF_URL }}/
          JFROG_CLI_LOG_LEVEL: DEBUG
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: github-schweizerische-bundesbahnen
      - name: 🧱 Configure Maven for Artifactory
        run: jf mvn-config --repo-resolve-releases=polarion-mvn-all --repo-resolve-snapshots=polarion-mvn-all
      - name: 📝 Get the project version
        id: project_version
        run: echo "project_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> "$GITHUB_OUTPUT"
      - name: 📝 Store cache key
        id: cache_key
        run: echo "cache_key=${{ runner.os }}-mvn-${{ hashFiles('**/pom.xml') }}-${{ github.sha }}" >> "$GITHUB_OUTPUT"
      - name: 💾 Prepare cache using cache key
        id: prepare-cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684  # v4.2.3
        with:
          path: |
            /home/runner/.m2
            /home/runner/work
          key: ${{ steps.cache_key.outputs.cache_key }}
      - name: 🔘 Generate settings.xml for Maven
        uses: whelk-io/maven-settings-xml-action@9dc09b23833fa9aa7f27b63db287951856f3433d  # v22
        with:
          servers: >
            [
              {
                "id": "github",
                "username": "${env.GITHUB_ACTOR}",
                "password": "${env.GITHUB_TOKEN}"
              },
              {
                "id": "ossrh",
                "username": "${env.COM_SONATYPE_CENTRAL_POLARION_OPENSOURCE_USERNAME}",
                "password": "${env.COM_SONATYPE_CENTRAL_POLARION_OPENSOURCE_TOKEN}"
              },
              {
                "id": "gpg.passphrase",
                "passphrase": "${env.COM_SONATYPE_CENTRAL_POLARION_OPENSOURCE_GPG_PASSPHRASE}"
              }
            ]
          profiles: >
            [
              {
                "id": "deploy-github-packages",
                "properties":
                {
                  "altDeploymentRepository": "github::default::https://maven.pkg.github.com/${{ github.repository }}"
                }
              }
            ]
      - name: 🔘 Print settings.xml
        run: cat /home/runner/.m2/settings.xml
      - name: 📦 Build with Maven for Pushes
        if: github.event_name == 'push'
        env:
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: mvn --batch-mode clean package  # sonar:sonar -Dsonar.branch.name="${GITHUB_HEAD_REF}"
      - name: 📦 Build with Maven for PRs
        if: github.event_name == 'pull_request'
        env:
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_PR_NUMBER_REF: ${{ github.event.pull_request.number }}
        run: mvn --batch-mode clean package
